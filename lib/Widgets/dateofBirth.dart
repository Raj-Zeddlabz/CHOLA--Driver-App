import 'package:flutter/material.dart';
import 'package:intl/intl.dart';

class DateOfBirth extends StatefulWidget {
  final Function(DateTime datetime)? onDateTimeChanged;
  final Size? daySize;
  final Size? monthSize;
  final Size? yearSize;
  final Color? backgroundColor;
  final Color? backgroundDropdownColor;
  final double? radius;
  final Color? borderColor;
  final double? textsSize;
  final Color? itemColor;
  final Color? itemsColor;
  final int? startingYear;

  const DateOfBirth({
    Key? key,
    this.daySize,
    this.monthSize,
    this.yearSize,
    this.backgroundColor,
    this.radius,
    this.borderColor,
    this.textsSize,
    this.itemColor,
    this.itemsColor,
    this.backgroundDropdownColor,
    this.startingYear,
    required this.onDateTimeChanged,
  }) : super(key: key);

  @override
  State<DateOfBirth> createState() => _DateOfBirthState();
}

class _DateOfBirthState extends State<DateOfBirth> {
  late List<String> months;
  late DateTime _selectedDate;
  late List<int> listyears;

  @override
      /// Initializes the state of the widget.
    ///
    /// This method is called when the widget is inserted into the tree. It sets up
    /// the initial state of the widget, including the selected date, the list of
    /// years, and the list of months.
    ///
    /// This method does not take any parameters.
    ///
    /// This method does not return any value.
  void initState() {
    super.initState();
    _selectedDate = DateTime.now();
    listyears = List.generate(
        DateTime.now().year - (widget.startingYear ?? 1940) + 1,
        (index) => DateTime.now().year - index);

    months = DateFormat.MMMM().dateSymbols.MONTHS;

    // Select the default date based on the selected starting year
    if (widget.startingYear != null) {
      _selectedDate = DateTime(
        widget.startingYear!,
        DateTime.now().month,
        DateTime.now().day,
      );
    }
  }
  /// Returns the number of days in a given month and year.
  ///
  /// The [year] parameter specifies the year for which the number of days is
  /// calculated. The [month] parameter specifies the month for which the number
  /// of days is calculated.
  ///
  /// Returns the number of days in the specified month and year.
  int daysInMonth(int year, int month) {
    return DateTime(year, month + 1, 0).day;
  }

  changeSelectedDate(DateTime datetime) {
    setState(() {
      _selectedDate = datetime;
    });
    widget.onDateTimeChanged!(_selectedDate);
  }

  @override
      /// Builds a widget that displays a date of birth selection row.
    ///
    /// The [BuildContext] used to access the screen dimensions.
    /// Returns a [Container] widget that contains a [Row] widget with an icon,
    /// a day selection widget, a separator text, a month selection widget, another
    /// separator text, a year selection widget, and an end icon.
    /// The day, month, and year selection widgets are generated by the private
    /// helper methods [_buildDays], [_buildMonths], and [_buildYears], respectively.
    /// Each selection widget is wrapped in a [Container] with specific dimensions
    /// and decorations.
    /// The selection widgets are centered within their respective containers.
    /// The selection widgets have an onChanged callback that updates the selected
  Widget build(BuildContext context) {
    double width = MediaQuery.of(context).size.width;
    return Container(
      width: double.infinity, // Cover whole width of the screen
      child: Row(
        mainAxisAlignment: MainAxisAlignment.spaceBetween,
        children: [
          Icon(Icons.calendar_month),
          SizedBox(
            width: width * 0.01,
          ),
          Container(
            width: width / 5,
            height: width * 0.1,
            decoration: BoxDecoration(
              color: widget.backgroundColor ?? Theme.of(context).primaryColor,
              borderRadius: BorderRadius.circular(widget.radius ?? 5),
              border:
                  Border.all(color: widget.borderColor ?? Colors.transparent),
            ),
            child: Center(
              child: _buildDays(
                daysinmonth:
                    daysInMonth(_selectedDate.year, _selectedDate.month),
                onChanged: (newvalue) {
                  changeSelectedDate(DateTime(
                      _selectedDate.year, _selectedDate.month, newvalue!));
                },
                selectedDate: _selectedDate.day,
                width: width,
              ),
            ),
          ),
          SizedBox(
            width: width * 0.01,
          ),
          Text('/', style: TextStyle(fontSize: 24)),
          SizedBox(
            width: width * 0.01,
          ),
          Container(
            width: width / 4,
            height: width * 0.1,
            decoration: BoxDecoration(
              color: widget.backgroundColor ?? Theme.of(context).primaryColor,
              borderRadius: BorderRadius.circular(widget.radius ?? 5),
              border:
                  Border.all(color: widget.borderColor ?? Colors.transparent),
            ),
            child: Center(
              child: _buildMonths(
                width: width,
                listMonths: months,
                onChanged: (newvalue) {
                  int currentmonthdays =
                      daysInMonth(_selectedDate.year, newvalue! + 1);
                  if (currentmonthdays < _selectedDate.day) {
                    changeSelectedDate(DateTime(
                        _selectedDate.year, newvalue + 1, currentmonthdays));
                  } else {
                    changeSelectedDate(DateTime(
                        _selectedDate.year, newvalue + 1, _selectedDate.day));
                  }
                },
                selectedDate: _selectedDate.month - 1,
              ),
            ),
          ),
          SizedBox(
            width: width * 0.01,
          ),
          Text('/', style: TextStyle(fontSize: 24)),
          SizedBox(
            width: width * 0.01,
          ),
          Container(
            width: width / 5,
            height: width * 0.1,
            decoration: BoxDecoration(
              color: widget.backgroundColor ?? Theme.of(context).primaryColor,
              borderRadius: BorderRadius.circular(widget.radius ?? 5),
              border:
                  Border.all(color: widget.borderColor ?? Colors.transparent),
            ),
            child: Center(
                child: _buildYears(
              list: listyears,
              selectedDate: _selectedDate.year,
              onChanged: (newvalue) {
                changeSelectedDate(DateTime(
                    newvalue!, _selectedDate.month, _selectedDate.day));
              },
              width: width,
            )),
          ),
        ],
      ),
    );
  }

  _buildYears(
      {required double width,
      required int selectedDate,
      required Function(int?) onChanged,
      required List<int> list}) {
    return DropdownButton<int>(
      dropdownColor: widget.backgroundDropdownColor,
      alignment: Alignment.center,
      icon: const Text(''),
      elevation: 0,
      underline: const Text(''),
      key: const Key("2"),
      items: list.map((item) {
        return DropdownMenuItem<int>(
          value: item,
          child: Center(
            child: Text(
              item.toString(),
              style: Theme.of(context).textTheme.bodyMedium!.copyWith(
                    fontSize: widget.textsSize ?? 0.045 * width,
                    color: widget.itemsColor ?? Colors.black,
                  ),
            ),
          ),
        );
      }).toList(),
      onChanged: onChanged,
      value: selectedDate,
      selectedItemBuilder: (context) => list.map((item) {
        return Center(
          child: Text(
            item.toString(),
            style: Theme.of(context).textTheme.bodyMedium!.copyWith(
                  fontSize: widget.textsSize ?? 0.045 * width,
                  color: widget.itemColor ?? Colors.black,
                ),
          ),
        );
      }).toList(),
    );
  }

  _buildMonths(
      {required double width,
      required int selectedDate,
      required Function(int?) onChanged,
      required List<String> listMonths}) {
    return DropdownButton(
      dropdownColor: widget.backgroundDropdownColor,
      alignment: Alignment.center,
      icon: const Text(''),
      elevation: 0,
      underline: const Text(''),
      key: const Key("0"),
      items: List.generate(
          listMonths.length,
          (index) => DropdownMenuItem(
                value: index,
                child: Center(
                  child: Text(
                    listMonths[index],
                    style: Theme.of(context).textTheme.bodyMedium!.copyWith(
                          fontSize: widget.textsSize ?? 0.035 * width,
                          color: widget.itemsColor ?? Colors.black,
                        ),
                  ),
                ),
              )),
      onChanged: onChanged,
      value: selectedDate,
      selectedItemBuilder: (context) => List.generate(
        listMonths.length,
        (index) => Center(
          child: Text(
            listMonths[index],
            style: Theme.of(context).textTheme.bodyMedium!.copyWith(
                  fontSize: widget.textsSize ?? 0.035 * width,
                  color: widget.itemColor ?? Colors.white,
                ),
          ),
        ),
      ),
    );
  }

  _buildDays(
      {required double width,
      required int selectedDate,
      required Function(int?) onChanged,
      required int daysinmonth}) {
    return DropdownButton<int>(
      dropdownColor: widget.backgroundDropdownColor,
      alignment: Alignment.center,
      icon: const Text(''),
      elevation: 0,
      underline: const Text(''),
      key: const Key("0"),
      items: List.generate(daysinmonth, (index) => index + 1)
          .map(
            (value) => DropdownMenuItem<int>(
              value: value,
              child: Center(
                child: Text(
                  value.toString(),
                  style: Theme.of(context).textTheme.bodyMedium!.copyWith(
                        fontSize: widget.textsSize ?? 0.045 * width,
                        color: widget.itemsColor ?? Colors.black,
                      ),
                ),
              ),
            ),
          )
          .toList(),
      onChanged: onChanged,
      value: selectedDate,
      selectedItemBuilder: (context) =>
          List.generate(daysinmonth, (index) => index + 1)
              .map(
                (value) => Center(
                  child: Text(
                    value.toString(),
                    style: Theme.of(context).textTheme.bodyMedium!.copyWith(
                          fontSize: widget.textsSize ?? 0.045 * width,
                          color: widget.itemColor ?? Colors.white,
                        ),
                  ),
                ),
              )
              .toList(),
    );
  }
}
